<!doctype html>
<html lang="en">
<!-- begin.rcode setup, echo=FALSE, include=FALSE
library(knitr)

c0 <- knitr::knit_hooks$get('chunk')

knitr::knit_hooks$set(
  list(
    chunk=function(x,options){
      if(is.null(options$class) & is.null(options$fragIndex)){
        c0(x, options)
      } else if(is.null(options$fragIndex)) {
        classidx <- which(names(options)=="class")
        paste0(
          paste0("<span class='", options$class, "'>"),
          c0(x, options[-classidx]),
          '</span>\n'
        )
      }
      else if(length(options$fragIndex)==1) {
        classidx <- which(names(options)%in%c("class", "fragIndex"))
        str_replace(
          paste0(
            paste0("<span class='", options$class, "' data-fragment-index=", options$fragIndex,">"),
            c0(x, options[-classidx]),
            '</span>\n'
          ),
          "<div class=\"chunk\" id=\"(.*?)\">\\s*<div class=\"rimage default\">(.*)</div>\\s*</div>",
          "\\2"
        )
      } else {
        classidx <- which(names(options)%in%c("class", "fragIndex"))
        str_replace(
          paste0(
            paste0("<span class='", options$class, " fade-in' data-fragment-index=", options$fragIndex[1],">"),
            paste0(
              paste0("<span class='", options$class, " fade-out' data-fragment-index=", options$fragIndex[2],">"),
              c0(x, options[-classidx]),
              '</span>\n'
              ),
            '</span>\n'
            ),
          "<div class=\"chunk\" id=\"(.*?)\">\\s*<div class=\"rimage default\">(.*)</div>\\s*</div>",
          "\\2"
        )

      }

    }
  )
)

opts_chunk$set(cache.path='cache/', fig.width=5, fig.height=5, fig.show='hold', echo=FALSE, cache=TRUE, autodep=TRUE, message=F, warning=F, error=F, dpi=300)
end.rcode-->

<head>
	<meta charset="utf-8">

	<title>Hierarchy of Visual Features</title>

	<meta name="description" content="JSM 2016 Presentation">
	<meta name="author" content="Susan VanderPlas">

	<meta name="apple-mobile-web-app-capable" content="yes" />
	<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes, minimal-ui">

	<link rel="stylesheet" href="css/reveal.css">
	<link rel="stylesheet" href="css/theme/simple.css" id="theme">
	<link rel="stylesheet" href="css/Presentation.css">

	<!-- Code syntax highlighting -->
	<link rel="stylesheet" href="lib/css/zenburn.css">

	<!-- Printing and PDF exports -->
	<script>
		var link = document.createElement( 'link' );
		link.rel = 'stylesheet';
		link.type = 'text/css';
		link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
		document.getElementsByTagName( 'head' )[0].appendChild( link );
	</script>

	<!--[if lt IE 9]>
	<script src="lib/js/html5shiv.js"></script>
	<![endif]-->
</head>

<!-- begin.rcode body, echo=FALSE, include=FALSE

end.rcode-->
<body>
<div class="reveal">
	<!-- Any section element inside of this container is displayed as a slide -->
	<div class="slides">

<section>
  <h1 style='font-size:2.5em;'> Clusters beat Trend!?<br>Testing Feature Hierarchy in Statistical Graphics</h1>
  <br></br>
  <h3>Susan VanderPlas & Heike Hofmann,</h3><br>
  <h4>Iowa State University</h4><br>
  <h4>August 1, 2016</h4>
</section>

<section>
  <section>
  	<h2> Outline </h2>
  	<ul>
  	  <li style="margin:20px"> <a href="#/setup">Introduction</a> </li>
      <li style="margin:20px"> <a href="#/experiment">Experiment Setup</a> </li>
        <ul style="font-size:80%">
          <li> <a href="#/model">Model</a> </li>
          <li> <a href="#/plot-aesthetics">Plot Aesthetics</a> </li>
        </ul>
      <li style="margin:20px"> <a href="#/results">Results</a> </li>
        <ul style="font-size:80%">
          <li> <a href="#/target-id">Target Identification</a> </li>
          <li> <a href="#/faceoff">Clusters vs. Trend</a> </li>
          <li> <a href="#/verbal-reasoning">Participant Reasoning</a> </li>
        </ul>
      <li style="margin:20px"> <a href="#/conclusion">Conclusions & Future Work</a> </li>
    </ul>
  </section>
</section>

<!--begin.rcode experiment-setup, echo=FALSE, include=FALSE, cache=TRUE
###########################################
# --- Main Article - Code and Figures --- #
###########################################
# --- Packages -----------------------------------------------------------------
library(stringr) # strings
library(lubridate) # dates/times
library(reshape2) # manipulating data
library(plyr)
library(dplyr) # cleaning/summarizing data
library(magrittr) # pipes

library(ggplot2) # plots
library(grid) # manipulate ggplot2/grid graphics
suppressMessages(library(gridExtra)) # combine ggplot2 plots
library(RColorBrewer) # Color schemes

library(nullabor) # Lineup package
library(digest) # hash text
library(Cairo) # graphics device - unicode characters

library(compiler) # Make simulations run faster

library(lme4) # mixed models

library(xtable) # Output tables to LaTeX

suppressMessages(library(multcomp)) # Multiple comparisons

library(wordcloud) # plot wordclouds
library(tm) # text mining

# --- Important Functions ------------------------------------------------------
# Identify the best combination of a set of colors/shapes based on a
# provided distance matrix
best.combo <- function(ngroups = 3, palette, dist.matrix){
  # check distance matrix
  if (nrow(dist.matrix) != length(palette) |
      ncol(dist.matrix) != length(palette)) {
    stop(paste0("The distance matrix does not match the size of the palette. ",
                "It should be ", length(palette), "x", length(palette), "."))
  }
  if ( (sum(dist.matrix < 0) > 0) ) {
    stop("Distance matrix cannot have negative entries.")
  }

  require(combinat)
  clist <- t(combn(1:length(palette), ngroups))
  pairwise.combos <- t(combn(1:ngroups, 2))
  res <- rowSums(apply(pairwise.combos, 1, function(i){
    diag(as.matrix(dist.matrix[clist[,i[1]], clist[,i[2]]]))
  }))

  return(palette[clist[which.max(res),]])
}

# Simulate clustered data: N points, in K clusters, with
# sd.cluster within-cluster standard deviation
sim.clusters <- function(K, N, sd.cluster=.3){
  xc <- sample(1:K, replace = F)
  yc <- sample(1:K, replace = F)
  xc <- jitter(xc, amount = .2)
  yc <- jitter(yc, amount = .2)
  while (cor(xc,yc) < .25 | cor(xc,yc) > .75) {
    xc <- sample(1:K, replace = F)
    yc <- sample(1:K, replace = F)
    xc <- jitter(xc, amount = .2)
    yc <- jitter(yc, amount = .2)
  }

  yc <- scale(yc)
  xc <- scale(xc)

  groups <- sample(K, N, replace = TRUE,
                   prob = abs(rnorm(K, mean = 1/K, sd = 0.5 / K ^ 2)))

  yerr <- rnorm(N, sd = sd.cluster)
  xerr <- rnorm(N, sd = sd.cluster)

  cluster.data <- data.frame(x = xc[groups] + xerr,
                             y = yc[groups] + yerr,
                             group = groups)
  return(cluster.data)
}

# Simulate linear data: N points with (sd.trend)^2 error variance
sim.line <- function(K = 3, N = 45, sd.trend = .3){
  # Simulate data from line
  line.data <- data.frame(x = jitter(seq(-1, 1, length.out = N)), y = 0)
  line.data$y <- line.data$x + rnorm(N, 0, sd.trend)

  return(line.data)
}

# Simulate data which is a mixture between clusters and lines
# Calls sim.clusters and sim.line
mixture.sim <- function(lambda, K, N, sd.trend=.3, sd.cluster=.3){
  cluster.data <- sim.clusters(K = K, N = N, sd.cluster = sd.cluster)
  cluster.data[,c("x", "y")] <- scale(cluster.data[,c("x", "y")])
  line.data <- sim.line(K = K, N = N, sd.trend = sd.trend)
  line.data[,c("x", "y")] <- scale(line.data[,c("x", "y")])

  ll <- rbinom(n = N, size = 1, prob = lambda)  # one model or the other
  mix.data <- data.frame(
    x = ll*cluster.data$x + (1 - ll)*line.data$x,
    y = ll*cluster.data$y + (1 - ll)*line.data$y,
    group = as.numeric(cluster.data$group)
  )

  mix.data[,c("x", "y")] <- scale(mix.data[,c("x", "y")])

  mix.data$group <- cutree(hclust(dist(mix.data[,c("x", "y")])), k = K)
  # grouping by the best K clusters

  return(mix.data)
}

# Generate data for an entire lineup
gen.data <- function(input){
  # Position of target plots
  pos <- sample(1:20, size = 2)

  # Trend target data
  trenddata <- mixture.sim(lambda = 0,
                           N = input$N,
                           K = input$K,
                           sd.trend = input$sd.trend,
                           sd.cluster = input$sd.cluster)
  # Cluster target data
  clusterdata <- mixture.sim(lambda = 1,
                             N = input$N,
                             K = input$K,
                             sd.trend = input$sd.trend,
                             sd.cluster = input$sd.cluster)

  # Null data
  # Need 19 data sets so that nullabor works; then replace the data at
  # cluster target position with cluster target data
  nulldata <- rdply(19, function(.sample)
    mixture.sim(lambda = .5,
                N = input$N,
                K = input$K,
                sd.cluster = input$sd.cluster,
                sd.trend = input$sd.trend
    ))

  data <- lineup(true = trenddata, pos = pos[1], n = 20, samples = nulldata)
  data <- rbind.fill(
    subset(data, .sample != pos[2]),
    cbind(.sample = pos[2], clusterdata))

  data$target1 <- pos[1]
  data$target2 <- pos[2]

  data
}

# Calculate cluster sum of squares
cluster <- function(dframe) {
  # we assume to have x, y, and a group variable
  xmean <- mean(dframe$x)
  ymean <- mean(dframe$y)
  dframe$dist <- with(dframe, (x - xmean) ^ 2 + (y - ymean) ^ 2)
  SSTotal <- sum(dframe$dist)
  dframe <- dframe %>%
    group_by(group) %>%
    mutate(xgroup = mean(x), ygroup = mean(y))
  dframe$gdist <- with(dframe, (x - xgroup) ^ 2 + (y - ygroup) ^ 2)
  SSGroup <- sum(dframe$gdist)
  (SSTotal - SSGroup)/SSTotal
}

# Calculate gini statistic
gini <- function(y, unbiased = TRUE, na.rm = FALSE){
  if ( (!is.numeric(y))) {
    warning("'y' is not numeric; returning NA")
    return(NA)
  }
  if (!na.rm && any(na.ind <- is.na(y)))
    stop("'x' contain NAs")
  if (na.rm)
    y <- y[!na.ind]
  x <- as.numeric(table(y))/sum(y)
  1 - sum(x ^ 2)
}

# Calculate trend/group/gini statistics for any given dataset
eval.df <- function(df){
  data.frame(
    line = summary(lm(y~x, data = df))$r.squared,
    group = cluster(df),
    gini = gini(df$group)
  )
}

# Calculate statistics for each lineup
eval.data <- function(df){

  nulls <- subset(df, .sample != target1 & .sample != target2)
  groups <- subset(df, .sample == target2)
  lines <- subset(df, .sample == target1)

  nl <- ddply(nulls, .(.sample), eval.df)

  cl <- eval.df(groups)
  ll <- eval.df(lines)

  c(null.line = max(nl$line),
    null.cluster = max(nl$group),
    null.gini = min(nl$gini),
    line = ll$line,
    cluster = cl$group,
    gini = cl$gini)
}

theme_lineup <- function(base_size = 12, base_family = ""){
  theme_bw(base_size = base_size, base_family = base_family) %+replace%
    theme(legend.position = "none",
          axis.text = element_blank(),
          axis.title = element_blank(),
          axis.ticks = element_blank(),
          plot.margin = unit(c(1,1,0,0), "line")
    )}

### Figure 3 ###
colors <-  c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd",
             "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
shapes <- c(1,0,3,4,8,5,2,6,-0x25C1, -0x25B7)

colortm <- read.csv("https://raw.githubusercontent.com/uwdata/perceptual-kernels/master/data/kernels/color-tm.txt", header = F)
# Also available at https://github.com/srvanderplas/FeatureHierarchy/blob/master/Data/color-perceptual-kernel.csv
colortm[8,] <- 0
colortm[,8] <- 0

shapetm <- read.csv("https://raw.githubusercontent.com/uwdata/perceptual-kernels/master/data/kernels/shape-tm.txt", header = F)
# Also available at https://github.com/srvanderplas/FeatureHierarchy/blob/master/Data/shape-perceptual-kernel.csv
shapetm[9,] <- shapetm[,9] <- 0
shapetm[10,] <- shapetm[,10] <- 0


color3pal <- best.combo(3, colors, colortm)
color5pal <- best.combo(5, colors, colortm)
shape3pal <- best.combo(3, shapes, shapetm)
shape5pal <- best.combo(5, shapes, shapetm)


### Prepare modeldata data frame ###
modeldata <- read.csv("modeldata.csv", stringsAsFactors = F) %>%
  mutate(start_time = ymd_hms(start_time),
         end_time = ymd_hms(end_time),
         k = factor(k, levels = c(3, 5)),
         plottype = factor(plottype, levels = c("plain", "trend", "color",
                                                "shape", "colorShape", "colorEllipse",
                                                "colorTrend",  "trendError",
                                                "colorShapeEllipse",
                                                "colorEllipseTrendError"))
  )

totaltime <- modeldata %>% group_by(individualID) %>% summarize(
  total.experiment.time = max(end_time) - min(start_time)
)

plot48ans <- filter(modeldata, dataset==48,
                    plottype%in%c("colorEllipse", "trendError"))
plot48ans <- plot48ans %>%
  group_by(response.id) %>%
  do({
    response <- unlist(str_split(.$response_no, ","))
    df2 <- data.frame()
    for(i in response){
      df2 <- rbind(df2, data.frame(.[,c(1:8)], response_no=i, .[,10:41]))
    }
    df2
  })


sample.lineup.pcts <- ddply(plot48ans, .(plottype), function(df){
  sapply(1:20, function(i) sprintf("%.1f", sum(df$response_no==i)/length(df$response_no)*100))
})
end.rcode-->

<section id="setup"><!-- Introduction -->
  <section class="center">
    <h2> Introduction </h2>
  </section>

  <section>
    <h2> Which plot is the most different? </h2>
    <table width="100%">
      <tr>
        <td width="45%" style="text-align:center;vertical-align:top;">
          <img src="image/set-48-k-5-sdline-0.45-sdgroup-0.25-TREND.png" width='100%' height='auto'/>
          <p style="color: #add9e4;"> Trend target: 12, Cluster target: 5 </p>
        </td>
        <td width="54%" style="margin-left:30px;text-align:left;vertical-align:top;">

        </td>
      </tr>
    </table>
  </section>

  <section>
    <h2> Which plot is the most different? </h2>
    <table width="100%">
      <tr>
        <td width="45%" style="text-align:center;vertical-align:top;">
          <img src="image/set-48-k-5-sdline-0.45-sdgroup-0.25-COLOR.png" width='100%' height='auto'/>
          <p style="color: #add9e4;"> Trend target: 12, Cluster target: 5 </p>
        </td>
        <td width="54%" style="margin-left:30px;text-align:left;vertical-align:top;">
          <div class="fragment" data-fragment-index=2 style="text-align:center;display:inline-block;margin-top:30px;">
            <h4> <b> Participant Responses </b> </h4>
            <table>
              <tr>
                <td style="text-align:right;padding-left:20px;padding-top:20px;padding-right:20px;"> Plot 12: </td> <td style="text-align:right;padding-top:20px;"> <!--rinline sample.lineup.pcts[1,13]-->% </td>
                <td style="text-align:right;padding-left:20px;padding-top:20px;">(Trend target)</td>
              </tr>
              <tr>
                <td style="text-align:right;padding-left:20px;padding-top:20px;padding-right:20px;"> Plot 5: </td> <td style="text-align:right;padding-top:20px;"> <!--rinline sample.lineup.pcts[1, 6]-->% </td>
                <td style="text-align:right;padding-left:20px;padding-top:20px;">(Cluster target)</td>
              </tr>
              <tr>
                <td style="text-align:right;padding-left:20px;padding-top:20px;padding-right:20px;"> Plot 18: </td> <td style="text-align:right;padding-top:20px;"> <!--rinline sample.lineup.pcts[1, 19]-->% </td>
              </tr>
              <tr>
                <td style="text-align:right;padding-left:20px;padding-top:20px;padding-right:20px;"> Other: </td> <td style="text-align:right;padding-top:20px;"> <!--rinline sprintf("%.1f", sum(as.numeric(sample.lineup.pcts[1, c(2:21)[-c(12, 5, 18)]])))-->% </td>
              </tr>
            </table>
            Sample size: 31
          </div>
        </td>
      </tr>
    </table>
  </section>

    <section>
    <h2> Which plot is the most different? </h2>
    <table width="100%">
      <tr>
        <td width="45%" style="text-align:center;vertical-align:top;">
          <img src="image/set-48-k-5-sdline-0.45-sdgroup-0.25-TREND.png" width='100%' height='auto'/>
          <p style="color: #add9e4;"> Trend target: 12, Cluster target: 5 </p>
        </td>
        <td width="54%" style="margin-left:30px;text-align:left;vertical-align:top;">
          <div style="text-align:center;display:inline-block;margin-top:30px;">
            <h4> <b> Participant Responses </b> </h4>
            <table>
              <tr>
                <td style="text-align:right;padding-left:20px;padding-top:20px;padding-right:20px;"> Plot 12: </td> <td style="text-align:right;padding-top:20px;"> <!--rinline sample.lineup.pcts[2,13]-->% </td>
                <td style="text-align:right;padding-left:20px;padding-top:20px;">(Trend target)</td>
              </tr>
              <tr>
                <td style="text-align:right;padding-left:20px;padding-top:20px;padding-right:20px;"> Plot 5: </td> <td style="text-align:right;padding-top:20px;"> <!--rinline sample.lineup.pcts[2, 6]-->% </td>
                <td style="text-align:right;padding-left:20px;padding-top:20px;">(Cluster target)</td>
              </tr>
              <tr>
                <td style="text-align:right;padding-left:20px;padding-top:20px;padding-right:20px;"> Other: </td> <td style="text-align:right;padding-top:20px;"> <!--rinline sprintf("%.1f", sum(as.numeric(sample.lineup.pcts[2, c(2:21)[-c(12, 5)]])))-->% </td>
              </tr>
            </table>
            Sample size: 22
          </div>
        </td>
      </tr>
    </table>
  </section>
</section>

<section id = "experiment">
  <section class="center">
    <h2> Experiment Design </h2>
  </section>

  <section id="model">
    <h2> Data-Generating Models </h2>
<!--begin.rcode datamodels, dev.args = list(bg = 'transparent'), echo=F, fig.width=4, fig.height=4, out.width='300px', out.height='300px', fig.show='hold'

  set.seed(50980)
  data <- mixture.sim(lambda=0, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=I(1)) +
    xlim(c(-2, 2)) + ylim(c(-2, 2)) +
    xlab(NULL) + ylab(NULL) +
    geom_text(aes(x=-1.9, y=1.9, label="Trend Model"), hjust=0, vjust=1, size=6, inherit.aes = F) +
    theme_minimal()  +
    theme(axis.text=element_blank(), axis.title=element_blank(),
          axis.ticks = element_blank(), axis.ticks.length = unit(0, "cm"),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  set.seed(50980)
  data <- mixture.sim(lambda=.5, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=I(1)) +
    xlim(c(-2, 2)) + ylim(c(-2, 2)) +
    xlab(NULL) + ylab(NULL) +
    geom_text(aes(x=-1.9, y=1.9, label="50% Mixture"), hjust=0, vjust=1, size=6, inherit.aes = F) +
    theme_minimal()  +
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          axis.ticks = element_blank(), axis.ticks.length = unit(0, "cm"),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  set.seed(50980)
  data <- mixture.sim(lambda=1, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=I(1)) +
    xlim(c(-2, 2)) + ylim(c(-2, 2)) +
    xlab(NULL) + ylab(NULL) +
    geom_text(aes(x=-1.9, y=1.9, label="Cluster Model"), hjust=0, vjust=1, size=6, inherit.aes = F) +
    theme_minimal()  +
    theme(axis.text=element_blank(), axis.title=element_blank(),
          axis.ticks = element_blank(), axis.ticks.length = unit(0, "cm"),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))

end.rcode-->
    <div style="font-size:75%;margin-top:30px;">
    <table class="noborder nowidth">
      <tr>
        <td colspan=3 style="text-align:center;border-bottom: 1px solid;"> Parameters </td>
      </tr><tr>
        <td width="300px" style="text-align:center;vertical-align:middle;" rowspan=2> $\sigma_T$: Variability in $y$</td>
        <td width="300px" style="text-align:center;vertical-align:middle;" rowspan=2> $\lambda$: Mixing parameter </td>
        <td width="300px" style="text-align:center;vertical-align:middle;"> $K$: # clusters </td>
      </tr><tr>
        <td width="300px" style="text-align:center;vertical-align:middle;">$\sigma_C$: Variability around cluster centers</td>
      </tr><tr>
        <td colspan=3 style="text-align:center;border-top: 1px solid;">
    </table>
    </div>
  </section>
  <section id="plot-aesthetics">
    <h2> Plot Aesthetic Combinations </h2>
    <table style="border-collapse: collapse; font-size:75%; margin-bottom:40px;">
      <tr>
        <td colspan=2></td><td class="bb" colspan=3 style="text-align:center;">Trend Emphasis</td>
      </tr><tr style="text-align:center;">
        <td></td>
        <td class="bb br">Strength</td>
        <td class="bb" style="text-align:center;background-color:#d3ebf1;">0</td>
        <td class="bb" style="text-align:center;background-color:#9ad0de;">1</td>
        <td class="bb br" style="text-align:center;background-color:#87c7d7;">2</td>
      </tr><tr>
        <td rowspan=4 style="vertical-align:middle;">Cluster<br>Emphasis</td>
        <td class="br bl" style="text-align:center;background-color:#d3ebf1;">0</td>
        <td style="text-align:center;background-color:#d3ebf1;">Plain</td>
        <td style="text-align:center;background-color:#9ad0de;">Line</td>
        <td class="br" style="text-align:center;background-color:#87c7d7;">Line + Pred. Interval</td>
      </tr><tr>
        <td class="br bl" style="text-align:center;background-color:#9ad0de;">1</td>
        <td style="text-align:center;background-color:#9ad0de;">Color<br>Shape</td>
        <td style="text-align:center;background-color:#d3ebf1">Color + Line</td>
        <td class="br"></td>
      </tr><tr>
        <td class="br bl" style="text-align:center;background-color:#87c7d7;">2</td>
        <td style="text-align:center;background-color:#87c7d7;">Color + Shape<br>Color + Ellipse</td>
        <td></td>
        <td class="br" style="text-align:center;background-color:#d3ebf1;">Color + Ellipse + <br>Line + Pred. Interval</td>
      </tr><tr>
        <td class="br bb bl" style="text-align:center;background-color:#73bed1;">3</td>
        <td class="bb" style="text-align:center;background-color:#73bed1;">Color + Shape + Ellipse</td>
        <td class="bb"></td>
        <td class="bb br"></td>
      </tr>
    </table>
    <div style="display:inline-block;width:40%;vertical-align:middle;">
<!--begin.rcode color-shape-palettes, fig.width=4, fig.height=2, out.width="90%", out.height="auto", echo=F
ggplot() +
  geom_point(aes(x=rep(c(2:4, 1:5), times=2),
                 y=c(rep(1.1, 3), rep(0.5, 5), rep(0.9, 3), rep(0.3, 5)),
                 shape=c(rep(16, 8), shape3pal, shape5pal),
                 color=c(color3pal, color5pal, rep("black", 8))), size=5) +
  geom_rect(aes(xmin = 1.5, xmax = 4.5, ymin = 0.8, ymax = 1.2), fill = "transparent", color = "black") +
  geom_text(aes(x = 3, y = 1.2, label = "K = 3"), vjust = -0.2, hjust = 0.5) +
  geom_rect(aes(xmin = 0.5, xmax = 5.5, ymin = 0.2, ymax = 0.6), fill = "transparent", color = "black") +
  geom_text(aes(x = 3, y = 0.6, label = "K = 5"), vjust = -0.2, hjust = 0.5) +
  scale_shape_identity() +
  scale_color_identity() +
  xlim(c(0.5, 5.5)) + ylim(c(0.1, 1.3)) +
  xlab(NULL) + ylab(NULL) +
  theme_void()  +
  theme(axis.text=element_blank(), axis.title=element_blank(),
        line=element_blank(),
        text=element_blank(), title=element_blank(),
        panel.background = element_rect(fill = "white", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA),
        plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
  </div><div style="display:inline-block;width:50%;vertical-align:middle;font-size:80%;">
    <p>Palettes selected to provide maximum perceptual distance (&#199;. Demiralp, et al., 2014).</p>
    <p>Shapes conform to guidelines in Robinson (2003) and Lewandowsky & Spence (1989).</p>
  </div>
  </section>
  <section>
    <h2> Plot Aesthetic Combinations </h2>
<!--begin.rcode plot-aes-demo, fig.width=4, fig.height=4, out.width="200px", out.height="200px", echo=F, include=T, fig.show="hold"

set.seed(325095273)
data <- mixture.sim(K=5, N=75, sd.cluster=.20, sd.trend=.25, lambda=0.5)
plot.parms <- expand.grid(
  color = c(0,1),
  shape = c(0,1),
  reg = c(0,1),
  err = c(0,1),
  ell = c(0,1)
)[c(
  1, # control
  2, # color
  3, # shape
  4, # color + shape
  18, # color + ellipse
  20, # color + shape + ellipse
  5, # trend
  13, # trend + error
  6, # color + trend
  30 # color + ellipse + trend + error
),]

titles <- c("Plain", "Color", "Shape", "Color + Shape", "Color + Ellipse", "Color + Shape + Ellipse", "Trend", "Trend + Pred. Int.", "Color + Trend", "Color + Ellipse +\nTrend + Pred. Int.")

# function to create a list of chosen aesthetics
get.aes <- function(r){
  c("Color", "Shape")[which(as.logical(r[1:2]))]
}

# function to create a list of chosen statistics
get.stats <- function(r){
  c("Reg. Line", "Error Bands", "Ellipses")[which(as.logical(r[3:5]))]
}
 # lines and ellipses are not data structure, so reduce contrast to emphasize points!
  # Set other geoms/aids


model <- lm(y~x, data=data)
range <- diff(range(data$x))
newdata <- data.frame(x=seq(min(data$x), max(data$x), length.out=400))
tmp <-   data.frame(.sample=1, x=newdata$x,
             predict.lm(model, newdata=newdata, interval="prediction", level=0.9))

for(i in 1:10){
  stats <- get.stats(plot.parms[i,])
  aes <- get.aes(plot.parms[i,])
  pointsize <- 5

  plot <- ggplot(data=data, aes(x=x, y=y)) + theme_lineup()
  if("Reg. Line"%in%stats){
    plot <- plot + geom_smooth(method="lm", color="grey30", se=F, fullrange=TRUE)
  }
  if("Error Bands"%in%stats){
    if("Shade Error Bands"%in%stats & "Error Bands"%in%stats){
      plot <- plot +
        geom_line(data=tmp, aes(x=x, y=lwr), linetype=2, inherit.aes=F) +
        geom_line(data=tmp, aes(x=x, y=upr), linetype=2, inherit.aes=F) +
        geom_ribbon(data=tmp, aes(x=x, ymin=lwr, ymax=upr), fill="black", color="transparent", alpha=.1, inherit.aes=F)
    } else {
      plot <- plot +
        geom_line(data=tmp, aes(x=x, y=lwr), linetype=2, inherit.aes=F) +
        geom_line(data=tmp, aes(x=x, y=upr), linetype=2, inherit.aes=F)
    }
  }

  if("Ellipses"%in%stats){
    if("Color"%in%aes){
      if("Shade Ellipses"%in%stats){
        plot <- plot + stat_ellipse(geom="polygon", level=.9, aes(fill=factor(group), colour=factor(group)), alpha=0.1) +
          scale_fill_manual(guide="none", values=color5pal)
      } else {
        plot <- plot + stat_ellipse(geom="polygon", level=.9, aes(colour=factor(group)), alpha=0.2, fill="transparent")
      }
    } else if("Shape"%in%aes){
      plot <- plot + stat_ellipse(geom="polygon", level=.9, aes(group=factor(group)),
                                  colour="grey15", fill="transparent")
    } else {
      plot <- plot + stat_ellipse(geom="polygon", level=.9, aes(group=factor(group)),
                                  colour="grey15", fill="transparent")
    }
  }

  if("Shade Ellipses"%in%stats & "Ellipses" %in% stats){
    plot <- plot + stat_ellipse(geom="polygon", level=.9, aes(group=factor(group)), alpha=0.1, fill="black", color="transparent")
  }

  # points on top of everything
  # Set Aesthetics
  if(length(aes)==0){
    plot <- plot + geom_point(size=pointsize, shape=1) +
      scale_shape_discrete(solid=F)
  } else if(length(aes)==1){
    if("Color"%in%aes){
      plot <- plot + geom_point(aes(color=factor(group)), size=pointsize, shape=1) +
        scale_color_manual(guide="none", values=color5pal)
    } else {
      plot <- plot + geom_point(aes(shape=factor(group)), size=pointsize) +
        scale_shape_manual(guide="none", values=shape5pal)
    }
  } else {
    plot <- plot + geom_point(aes(color=factor(group), shape=factor(group)), size=pointsize) +
      scale_color_manual(guide="none", values=color5pal) +
      scale_shape_manual(guide="none", values=shape5pal)
  }

  plot <- plot +
    xlab(NULL) + ylab(NULL) +
    ggtitle(titles[i]) +
  theme_minimal()  +
  theme(axis.text=element_blank(), axis.title=element_blank(),
        plot.title = element_text(size = 20, face = "bold"),
        axis.ticks = element_blank(), axis.ticks.length = unit(0, "cm"),
        line=element_blank(),
        panel.background = element_rect(fill = "white", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA),
        plot.margin=unit(c(0,0,0,0), "cm"))
  print(plot)
}

end.rcode-->
  </section>
  <section>
    <h2> Experimental Structure </h2>
    <table class="noborder">
      <tr>
        <td style="padding-right:50px;vertical-align:top;">
          <div style="vertical-align:top;display:inline-block;">
            <h5> <b>Model Parameters</b> </h5>
            <div style="font-size:70%;">
              <ul>
                <li> Trend Strength <span style="text-align:right">$\sigma_T =$ easy, med., hard </span></li>
                <li> Cluster Strength <span style="text-align:right">$\sigma_C =$ easy, med., hard </span></li>
                <li> Number of Clusters <span style="text-align:right">$K =$ 3, 5 </span></li>
              <ul>
            </div>
          </div>
        </td>
        <td style="padding-left:50px;vertical-align:top;">
          <div>
          <h5> <b>Plot Level</b> </h5>
          <div style="font-size:75%;">
            <ul>
              <li> 18 parameter combinations </li>
              <li> 3 datasets/parameter combination </li>
              <li> 10 plot types for each dataset <br>
                   = 540 total plots </li>
            </ul>
          </div>
          </div>
        </td>
      </tr>
      <tr>
        <td style="padding-right:50px;vertical-align:top;">
          <div>
          <h4 style="text-align:center"> <b>Plot Aesthetics</b> </h4>
          <div style="font-size:70%;display:inline-block;">
            <ul>
              <li> Plain </li>
              <li> Trend </li>
              <li> Trend + Pred. Int. </li>
              <li> Color + Trend </li>
              <li> Color + Ellipse<br>+ Trend + Pred. Int. </li>
            </ul>
          </div>
          <div style="font-size:70%;display:inline-block;">
            <ul>
              <li> Color </li>
              <li> Shape </li>
              <li> Color + Shape </li>
              <li> Color + Ellipse </li>
              <li> Color + Shape<br>+ Ellipse </li>
            </ul>
          </div>
          </div>
        </td>
        <td style="padding-left:50px;vertical-align:bottom;">
        <div>
          <h5> <b> Evaluation Level </b> </h5>
          <div style="font-size:75%;" >
            <ul>
              <li> Participants evaluate 10 plots: </li>
              <ul>
                <li> 1 of each aesthetic </li>
                <li> 1 of each combination of $\sigma_T$ and $\sigma_C$<br>randomized over $K$ </li>
              </ul>
            </ul>
          </div>
        	</div>
        </td>
      </tr>
    </table>
  </section>

  <section>
    <h2>Data Collection</h2>
    <h6>(via Amazon Mechanical Turk)</h6>
      <h3> <!--rinline length(unique(modeldata$individualID))--> participants provided: </h3>
      <ul style="margin:.2em">
        <li> Demographic information: age range, gender, education level </li>
        <li> 10 plot evaluations (<!--rinline nrow(modeldata)--> total)
        <ul>
          <li> Target plot identification (one or more sub-plots) </li>
          <li> Level of confidence in their answer (1 = least, 5=most)  </li>
          <li> Reasoning <br> (i.e. "Strongest linear relationship", "Clustered points", "Odd shape") </li>
        </ul>
      </ul>
  </section>
</section> <!--experiment-->

<section>
  <section class="center" id="results">
    <h2>Results</h2>
    <ul>
      <li style="margin:10px"> <a href="#/target-id">Target Identification</a> </li>
      <li style="margin:10px"> <a href="#/faceoff">Cluster vs. Trend Target Selection</a> </li>
      <li style="margin:10px"> <a href="#/verbal-reasoning">Participant Reasoning</a> </li>
    </ul>
  </section>

  <section id="target-id">
    <h2> Target Identification </h2>
<!--begin.rcode target-aggregate, echo=F, include=T, fig.width=8, fig.height=4, out.width='70%', out.height='auto'
user.data <- modeldata %>% group_by(individualID) %>%
summarize(answers=length(individualID),
          cluster=sum(cluster.correct),
          trend=sum(trend.correct))
clusters <- as.data.frame(table(user.data$cluster))
trends <- as.data.frame(table(user.data$trend))
names(clusters) <- c("x", "Cluster")
clusters$Trend <- trends$Freq
clm <- melt(clusters, measure.var=2:3)

ggplot() +
  geom_point(aes(x, value, colour=variable, shape=variable), size=3, data=clm) +
  theme_bw() +
  scale_colour_brewer("Target", palette="Set1") +
  scale_shape_discrete("Target") +
  theme(legend.position=c(.85, .9), legend.direction="horizontal") +
  ylab("Number of participants") +
  xlab("Number of target identifications (out of ten)") +
  geom_line(aes(x, value, colour=variable, group=variable), data=clm) +
  ggtitle("Target Identification by Participants")
end.rcode-->
    <p> Participants selected more cluster targets than line targets.</p>
    <p> 5 plot types were expected to emphasize clustering; only 2 plot types were expected to emphasize trends. </p>
  </section>
<!--
  <section>
    <h2> Overall Accuracy </h2> -->
<!--begin.rcode overall-accuracy, echo=F, include=T, fig.width=8, fig.height=4, out.width='70%', out.height='auto'
md <- data.frame(plottype = levels(modeldata$plottype),
                 tendency = c("none", "trend", "cluster", "cluster",
                              "cluster", "cluster", "conflict",
                              "trend", "cluster", "conflict"))

modeldata$label <- modeldata$plottype
modeldata$label <- modeldata$plottype %>%
  str_replace("color", "Color + ") %>%
  str_replace("[sS]hape", "Shape + ") %>%
  str_replace("[tT]rend", "Trend + ") %>%
  str_replace("Ellipse", "Ellipse + ") %>%
  str_replace("Error", "Error + ") %>%
  str_replace("plain", "Plain") %>%
  str_replace("( \\+ )$", "") %>%
  str_replace_all(c("Color" = "C", "Shape" = "S", "Ellipse" = "L",
                    "Trend" = "T", "Error" = "E")) %>%
  str_replace_all(" \\+ ", "+")

faceoff <- subset(modeldata, trend.correct | cluster.correct)

fac.order <- levels(with(faceoff, reorder(label,label,function(x) -length(x))))
modeldata$label <- factor(modeldata$label, levels = fac.order)

totals <- modeldata %>%
  group_by(label, plottype) %>%
  summarize(eval = length(label), type = "Total")

correct.totals <- faceoff %>%
  group_by(label, plottype) %>%
  summarize(eval = length(label), type = "Correct")

sub.totals <- modeldata %>%
  group_by(label, plottype, simpleoutcome) %>%
  summarize(eval = length(label))
sub.totals <- merge(sub.totals, md, by = "plottype")

totals <- rbind(totals, correct.totals)
totals <- merge(totals, md, by = "plottype")
totals$tendency <- factor(totals$tendency,
                          levels = c("none", "trend", "cluster", "conflict"))
totals$label <- factor(totals$label, levels = fac.order, ordered = T)

md <- merge(md, subset(totals, type == "Correct")[,c("plottype", "label", "eval")],
            by = "plottype")
md <- md[order(md$tendency, md$eval),]

totals$label <- factor(totals$label, levels = md$label)

totals$nlabel = as.numeric(totals$label)
sub.totals$nlabel = as.numeric(factor(sub.totals$label, levels = md$label))
sub.totals$simpleoutcome <- factor(
  sub.totals$simpleoutcome,
  levels = c("cluster", "both", "trend", "neither"))
sub.totals$tendency <- factor(sub.totals$tendency,
                              levels = c("none", "trend", "cluster", "conflict"))
# ggplot() +
#   geom_bar(aes(x = label, fill = simpleoutcome, weight = eval), data = sub.totals,
#            colour = "grey40") +
#   facet_grid(.~tendency, space = "free", scales = "free") +
#   xlab("") + ylab("# of target evaluations") +
#   theme_bw() +
#   theme(axis.text.x = element_text(vjust = 1), axis.title.x = element_blank(), legend.position = "bottom", text = element_text(size = 10)) +
#   scale_fill_manual("Outcome", values = c("grey20", "grey30", "grey20", "grey90"),
#                     guide = guide_legend(reverse = TRUE))

end.rcode-->
<!--  </section>-->

<!--begin.rcode faceoff-model, echo=F, include=F

### Fit ALL the models!
modeldata$one.correct <- 1 - modeldata$neither.correct

gvl.4 <-  glmer(cluster.correct~sdline_new + sdgroup_new +
                  k_new + plottype + (1 | data_name) + (1 | individualID),
                data = faceoff,
                family = binomial(),
                control = glmerControl(optimizer = "bobyqa"))

end.rcode-->

<!--begin.rcode2 faceoff-model, echo=F, include=F
gvl.fixef <- data.frame(confint(gvl.4, method = "Wald"))
names(gvl.fixef) <- c("LB", "UB")
gvl.fixef$OR <- fixef(gvl.4)
gvl.fixef <- rbind(gvl.fixef, c(0,0,0))
row.names(gvl.fixef)[14] <- "plottypePlain"
# gvl.fixef <- gvl.fixef[-(1:4),] # exclude sigmas 
end.rcode-->

<!--begin.rcode3 faceoff-model, echo=F, include=F
gvl.all <- gvl.fixef
gvl.fixef <- gvl.fixef[c(14,5:13),]

type_compare <- glht(gvl.4, mcp(plottype = "Tukey"))
gvl.fixef$letters <- cld(type_compare)$mcletters$Letters 

end.rcode-->

  <section class="center" id="faceoff">
    <h2> Faceoff: Cluster vs. Trend? </h2>
  </section>

  <section>
    <h2> Cluster vs. Trend </h2>
    <p style="text-align:left;margin-bottom:2em">Define $C_{ijk}$ to be the event</p>
    <p>
    {Participant $k$ selects the <br>cluster target for dataset $j$ <br>with aesthetic set $i$},</p>
    <p> and $T_{ijk}$ to be the analogous selection of the trend target.</p>
$$\text{logit }P(C_{ijk}|C_{ijk}\cup T_{ijk}) = \textbf{W}\alpha + \textbf{X}\beta + \textbf{J}\gamma + \textbf{K}\eta$$ </td>

  </section>

  <section>
    <h2> Cluster vs. Trend </h2>
    <p> Given that participants identified one of the two target plots...</p>
    <table>
    	<td style="text-align:center;">$\alpha$</td>
    	<td> data model fixed effects</td>
    </tr>
    <tr>
      <td style="text-align:center;">$\beta$</td>
    	<td> effect of specific plot types</td>
    </tr>
    <tr>
    	<td style="text-align:center;">$\gamma_j \overset{iid}{\sim} N\left(0, \sigma^2_{\text{dataset}}\right)$</td>
    	<td> Dataset random effects </td>
    </tr>
    <tr>
    	<td style="text-align:center;">$\eta_k \overset{iid}{\sim} N\left(0, \sigma^2_{\text{participant}}\right)$</td>
    	<td> Participant random effects </td>
    </tr>
    <tr>
    	<td style="font-size:80%;text-align:center;">$\epsilon_{ijk} \overset{iid}{\sim}  N\left(0, \sigma^2_e\right)$</td>
    	<td style="font-size:80%"> Individual evaluation errors </td>
    </tr>
    </table>
    <p> Dataset and participant effects are orthogonal by design </p>
  </section>

  <section>
    <h2> Cluster vs. Trend </h2>
<!--begin.rcode cluster-vs-line, echo=F, include=T, fig.width=8, fig.height=3.5, out.width='80%', out.height='auto' 
### Figure 10 ###
load("gvlfixef.Rdata")
faceoff$one.ellipse <- faceoff$no.ellipse == 1

gvl.fixef$label <- gsub("plottype", "", row.names(gvl.fixef))
gvl.fixef$label <- gvl.fixef$label %>%
  str_replace("color", "Color + ") %>%
  str_replace("[sS]hape", "Shape + ") %>%
  str_replace("[tT]rend", "Trend + ") %>%
  str_replace("Ellipse", "Ellipse + ") %>%
  str_replace("Error", "Error + ") %>%
  str_replace("\\(Intercept\\)", "Plain + ") %>%
  str_replace("( \\+ )$", "") %>%
  reorder(gvl.fixef$OR)

ggplot(data = gvl.fixef) +
  geom_hline(yintercept = 0, colour = "gray70") +
  geom_pointrange(aes(x = label, y = OR, ymin = LB, ymax = UB), size = .25) +
  coord_flip() +
  theme_bw() +
  ggtitle("Odds of selecting Cluster over Trend Target") +
  xlab("") +
  geom_text(aes(y = -1, x = label, label = letters)) +
  scale_y_continuous(
    "Odds (on log scale) with 95% Wald Intervals",
    breaks = c(-1, log(c(1/c(2, 1.5), c(1,1.5, 2 ))), 1), labels = c("  <--Trend\n      Target", "1/2", "1/1.5" ,"1", "1.5", "2", "Cluster-->  \nTarget      "), limits = c(-1,1))

end.rcode-->
    <p style="font-size:50%;text-align:center;">Plot types are significantly different if they do not share a letter</p>

    <table>
    <tr>
      <td width="50%" style="font-size:70%;vertical-align:top;">
      <p> Participants are <!--rinline sprintf("%.2f", exp(gvl.fixef$OR[gvl.fixef$label=="Trend + Error"]))--> times as likely to select cluster targets when plots have trend line and prediction interval aesthetics. </p>
      </td><td style="font-size:70%;vertical-align:top;">
        <p style="margin-bottom:10px"> Participants are <!--rinline sprintf("%.2f", exp(gvl.fixef$OR[gvl.fixef$label=="Color + Shape + Ellipse"]))--> times as likely to select cluster targets when plots have color, shape, and ellipse aesthetics. </p>
      </td>
    </tr>
  </table>
  </section>


  <section class="center" id="verbal-reasoning">
    <h2> Participant Reasoning </h2>
  </section>

  <section>
    <h2> Participant Reasoning </h2>
      <h3> Plain Plots </h3>
<!--begin.rcode wordles-plain, echo=F, include=T, fig.width=4, fig.height=4, out.width='350px', out.height='350px'
lexicaldata <- modeldata
lexicaldata$choice_reason <- tolower(lexicaldata$choice_reason)
lexicaldata$choice_reason <- gsub("^_", "", lexicaldata$choice_reason)

words <- lexicaldata %>% group_by(plottype, simpleoutcome) %>%
  summarize(list = paste(choice_reason, collapse=" ")) %>% filter(simpleoutcome != "both", plottype %in% c("plain", "color", "trend", "colorEllipse"))

library(wordcloud)
library(tm)
for (i in 1:3) {
words.corpus <- Corpus(DataframeSource(data.frame(words$list[i])))
words.corpus <- tm_map(words.corpus, removePunctuation)

tdm <- TermDocumentMatrix(words.corpus)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
pal <- brewer.pal(9, "BuGn")
pal <- pal[-(1:2)]
# png(sprintf("wordcloud/wordcloud-%s-%s.png",words$plottype[i], words$simpleoutcome[i]), width=960,height=600)
wordcloud(d$word,d$freq, scale=c(8,.3),min.freq=2,max.words=100, random.order=T, rot.per=.15, colors="black", vfont=c("sans serif","plain"))
# dev.off()
}
end.rcode-->
    <div align="center">
    <table class="noborder nowidth nopadding">
      <tr>
        <td width='350px' style="text-align:center;"> Neither Target<br>(N=127) </td><td width='350px' style="text-align:center;"> Cluster Target<br>(N=712) </td> <td width='350px' style="text-align:center;"> Trend Target<br>(N=355) </td>
      </tr>
    </table>
    </div>
  </section>
  <section>
    <h2> Participant Reasoning </h2>
      <h3> Trend line </h3>
<!--begin.rcode wordles-line, dependson='wordles', echo=F, include=T, fig.width=4, fig.height=4, out.width='350px', out.height='350px'
for (i in 4:6) {
words.corpus <- Corpus(DataframeSource(data.frame(words$list[i])))
words.corpus <- tm_map(words.corpus, removePunctuation)

tdm <- TermDocumentMatrix(words.corpus)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
pal <- brewer.pal(9, "BuGn")
pal <- pal[-(1:2)]
# png(sprintf("wordcloud/wordcloud-%s-%s.png",words$plottype[i], words$simpleoutcome[i]), width=960,height=600)
wordcloud(d$word,d$freq, scale=c(8,.3),min.freq=2,max.words=100, random.order=T, rot.per=.15, colors="black", vfont=c("sans serif","plain"))
# dev.off()
}
end.rcode-->
    <div align="center">
    <table class="noborder nowidth nopadding">
      <tr>
        <td width='350px' style="text-align:center;"> Neither Target<br>(N=159) </td><td width='350px' style="text-align:center;"> Cluster Target<br>(N=694) </td> <td width='350px' style="text-align:center;"> Trend Target<br>(N=333) </td>
      </tr>
    </table>
    </div>
  </section>
  <section>
    <h2> Participant Reasoning </h2>
      <h3> Color Plots </h3>
<!--begin.rcode wordles-color, dependson='wordles', echo=F, include=T, fig.width=4, fig.height=4, out.width='350px', out.height='350px'
for (i in 7:9) {
words.corpus <- Corpus(DataframeSource(data.frame(words$list[i])))
words.corpus <- tm_map(words.corpus, removePunctuation)

tdm <- TermDocumentMatrix(words.corpus)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
pal <- brewer.pal(9, "BuGn")
pal <- pal[-(1:2)]
# png(sprintf("wordcloud/wordcloud-%s-%s.png",words$plottype[i], words$simpleoutcome[i]), width=960,height=600)
wordcloud(d$word,d$freq, scale=c(8,.3),min.freq=2,max.words=100, random.order=T, rot.per=.15, colors="black", vfont=c("sans serif","plain"))
# dev.off()
}
end.rcode-->
    <div align="center">
    <table class="noborder nowidth nopadding">
      <tr>
        <td width='350px' style="text-align:center;"> Neither Target<br>(N=188)</td><td width='350px' style="text-align:center;"> Cluster Target<br>(N=715) </td> <td width='350px' style="text-align:center;"> Trend Target<br>(N=292) </td>
      </tr>
    </table>
    </div>
  </section>
  <section>
    <h2> Participant Reasoning </h2>
      <h3> Color + Ellipse Plots </h3>
<!--begin.rcode wordles-colorEllipse, dependson='wordles', echo=F, include=T, fig.width=4, fig.height=4, out.width='350px', out.height='350px'
for (i in 10:12) {
words.corpus <- Corpus(DataframeSource(data.frame(words$list[i])))
words.corpus <- tm_map(words.corpus, removePunctuation)

tdm <- TermDocumentMatrix(words.corpus)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
pal <- brewer.pal(9, "BuGn")
pal <- pal[-(1:2)]
# png(sprintf("wordcloud/wordcloud-%s-%s.png",words$plottype[i], words$simpleoutcome[i]), width=960,height=600)
wordcloud(d$word,d$freq, scale=c(8,.3),min.freq=2,max.words=100, random.order=T, rot.per=.15, colors="black", vfont=c("sans serif","plain"))
# dev.off()
}
end.rcode-->
    <div align="center">
    <table class="noborder nowidth nopadding">
      <tr>
        <td width='350px' style="text-align:center;"> Neither Target<br>(N=347) </td><td width='350px' style="text-align:center;"> Cluster Target<br>(N=621) </td> <td width='350px' style="text-align:center;"> Trend Target<br>(N=222) </td>
      </tr>
    </table>
    </div>
  </section>
  
  <section>
    <h2> Which plot is the most different? </h2>
    <table width="100%">
      <tr>
        <td width="45%" style="text-align:center;vertical-align:top;">
          <img src="image/set-48-k-5-sdline-0.45-sdgroup-0.25-COLOR.png" width='100%' height='auto'/>
          <p style="color: #add9e4;"> Trend target: 12, Cluster target: 5 </p>
        </td>
        <td width="54%" style="margin-left:30px;text-align:left;vertical-align:top;">
          <div style="text-align:center;display:inline-block;margin-top:30px;">
            <h4> <b> Participant Responses </b> </h4>
            <table>
              <tr>
                <td style="text-align:right;padding-left:20px;padding-top:20px;padding-right:20px;"> Plot 12: </td> <td style="text-align:right;padding-top:20px;"> <!--rinline sample.lineup.pcts[1,13]-->% </td>
                <td style="text-align:right;padding-left:20px;padding-top:20px;">(Trend target)</td>
              </tr>
              <tr>
                <td style="text-align:right;padding-left:20px;padding-top:20px;padding-right:20px;"> Plot 5: </td> <td style="text-align:right;padding-top:20px;"> <!--rinline sample.lineup.pcts[1, 6]-->% </td>
                <td style="text-align:right;padding-left:20px;padding-top:20px;">(Cluster target)</td>
              </tr>
              <tr>
                <td style="text-align:right;padding-left:20px;padding-top:20px;padding-right:20px;"> Plot 18: </td> <td style="text-align:right;padding-top:20px;"> <!--rinline sample.lineup.pcts[1, 19]-->% </td>
              </tr>
              <tr>
                <td style="text-align:right;padding-left:20px;padding-top:20px;padding-right:20px;"> Other: </td> <td style="text-align:right;padding-top:20px;"> <!--rinline sprintf("%.1f", sum(as.numeric(sample.lineup.pcts[1, c(2:21)[-c(12, 5, 18)]])))-->% </td>
              </tr>
            </table>
            Sample size: 31
          </div>
        </td>
      </tr>
    </table>
  </section>
</section><!--results-->

<section id="conclusion">
  <section class='center'>
    <h2> Discussion </h2>
  </section>

  <section>
    <h2> Conclusions </h2>
    <ul>
      <li style="margin:20px"> Plot aesthetics influence perception of ambiguous data displays </li>
      <li style="margin:20px"> Aesthetic effects are not additive: <br>
      Conflict conditions don't show similar/neutral results </li>
      <li style="margin:20px"> Aesthetics which recruit new gestalt heuristics have more influence, and we can quantify the size of that influence </li>
    </ul>
  </section>

  <section>
    <h2> Future Work </h2>
    <ul>
      <li style="margin:20px"> Restrict group sizes so null plots have the same objects as target plots </li>
      <li style="margin:20px"> Explore the effect of different types of error bands and ellipses - shading, bounding boxes, etc. </li>
      <li style="margin:20px"> Test plotted statistics (trend line, ellipses, error bands) with and without data points to examine interactions between heuristics from the data and heuristics from summary statistics</li>
      <li style="margin:20px"> Test ellipse and error band aesthetics with and without trend lines (but with data points) and color to examine interaction effects</li>
    </ul>
  </section>
  
  <section>
    <h2> More Information </h2>
    <ul>
      <li style="margin:20px"> Github Repository (Data, paper, code)<br>
      <a href="http://github.com/srvanderplas/FeatureHierarchy/" style="font-size:80%">http://github.com/srvanderplas/FeatureHierarchy/</a> </li>
      <li style="margin:20px"> JCGS Paper: Clusters Beat Trend!? Testing Feature Hierarchy in Statistical Graphics<br><a href="http://www.tandfonline.com/doi/abs/10.1080/10618600.2016.1209116" style="font-size:80%">http://www.tandfonline.com/doi/abs/10.1080/10618600.2016.1209116</a> </li>
      <ul>
        <li> Lots of models examining trial completion time, parameter strength, and participant confidence </li>
        <li> Much more in-depth treatment of gestalt perception </li>
        <li> Simulation-based modeling of null plot characteristics </li>
      </ul>
    </ul>
  </section>

</section><!--Conclusion-->
</div> <!-- slides -->
</div> <!-- reveal -->

<script src="lib/js/head.min.js"></script>
<script src="js/reveal.js"></script>
<script>
	// Full list of configuration options available at:
	// https://github.com/hakimel/reveal.js#configuration
	Reveal.initialize({
		controls: true,
		progress: true,
		history: true,
		center: false,
		slideNumber: true,
		width: 1200,
		height: 800,
		margin: 0.05,
		transition: 'fade', // none/fade/slide/convex/concave/zoom
		// Optional reveal.js plugins
		dependencies: [
			{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
			{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
			{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
			{ src: 'plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() { hljs.initHighlightingOnLoad(); } },
			{ src: 'plugin/zoom-js/zoom.js', async: true },
			{ src: 'plugin/notes/notes.js', async: true },
			{ src: 'plugin/math/math.js', async: true }
		]
	});
</script>
</body>
</html>
